import db from '../../config/db.js';

// Get today's available daily foods and standard foods
export const getTodaysMenu = async () => {
    const today = new Date().toISOString().slice(0, 10); // Get YYYY-MM-DD format

    // Fetch today's daily meal packages
    const [dailyFoods] = await db.execute(
        `SELECT d_id, d_name, meal_type, meal_price, c_id FROM daily_food WHERE meal_date = ?`,
        [today]
    );

    // Fetch standard, available food items that haven't expired
    const [standardFoods] = await db.execute(
        `SELECT f_id, f_name, price, c_id FROM food WHERE stock > 0 AND expire_date >= ?`,
        [today]
    );

    return { dailyFoods, standardFoods };
};

// Create a new order from a customer's cart
export const createOrder = async (customerId, cartItems) => {
    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        // Step 1: Create a new cart record. The trigger will generate the cart_id.
        const [cartResult] = await connection.execute(
            'INSERT INTO cart (cus_id) VALUES (?)',
            [customerId]
        );
        const tempCartId = cartResult.insertId; // This is the auto-increment ID, not the one from the trigger.

        // Retrieve the actual cart_id generated by the trigger
        const [[{ cart_id }]] = await connection.execute(
            'SELECT cart_id FROM cart WHERE id = ?', 
            [tempCartId]
        );
        
        let totalAmount = 0;

        // Step 2: Process each item in the cart
        for (const item of cartItems) {
            if (item.d_id) { // It's a daily food item
                await connection.execute(
                    'UPDATE cart SET d_id = ?, item_count = ? WHERE cart_id = ?',
                    [item.d_id, item.quantity, cart_id]
                );
                totalAmount += item.meal_price * item.quantity;
            } else if (item.f_id) { // It's a standard food item
                 await connection.execute(
                    'UPDATE cart SET f_id = ?, item_count = ? WHERE cart_id = ?',
                    [item.f_id, item.quantity, cart_id]
                );
                totalAmount += item.price * item.quantity;
            }
        }
        
        // Update the total amount in the cart
        await connection.execute(
            'UPDATE cart SET total_amount = ? WHERE cart_id = ?',
            [totalAmount, cart_id]
        );

        // Step 3: Create the final order record. The trigger will generate the order_id.
        const [orderResult] = await connection.execute(
            'INSERT INTO orders (total_amount, cart_id) VALUES (?, ?)',
            [totalAmount, cart_id]
        );
        const tempOrderId = orderResult.insertId;

        // Retrieve the actual order_id (token) generated by the trigger
        const [[{ order_id }]] = await connection.execute(
            'SELECT order_id FROM orders WHERE id = ?',
            [tempOrderId]
        );

        await connection.commit();
        
        // Return the order_id as the customer's token
        return { order_id, total_amount: totalAmount };

    } catch (error) {
        await connection.rollback();
        console.error("Error in createOrder model:", error);
        throw error;
    } finally {
        connection.release();
    }
};
