import pool from '../config/db.js';
import bcrypt from 'bcrypt';

export const getCustomerByEmailModel = async (email) => {
  const [result] = await pool.query(
    'select * from customers where email = ?',
    [email]
  );
  return result[0];
}

export const getCustomerByPhoneModel = async (contact) => {
  const [result] = await pool.query(
    'select * from customers where contact = ?',
    [contact]
  );
  return result[0];
}

// Get customers by email or phone
export const getCustomerByEmailORPswdModel = async (credential) => {
  const [result] = await pool.query(
    'SELECT id, password, email, user_role, contact, refresh_token FROM customers WHERE email = ? OR contact = ?',
    [credential, credential]
  );

  if (result.length === 0) return null; // Prevent accessing undefined index
  console.log("ssssssssssss"+result[0])
  return result[0];
};

export const getCustomersByCusIdModel = async (empId) => {
  const [result] = await pool.query(
    'select * from customers where pasword IS NOT NULL and customer_id = ?',
    [empId]
  );
  return result[0];
}

export const addCustomerModel = async (name, email, contact, password) => {
  console.log("Adding customer:", { name, email, contact, password });

  const created_at = new Date().toISOString().split('T')[0];

  const hashedPassword = await bcrypt.hash(password, 10);

  console.log("Customer added:", hashedPassword);
  const [result] = await pool.query(
    'INSERT INTO customers (name, contact, email, user_role, created_at, password) VALUES (?, ?, ?, ?, ?, ?)',
    [name, contact, email, 'student', created_at, hashedPassword]
  );
  // Fetch the generated customer_id (since it's generated by trigger)
  const [rows] = await pool.query(
    'SELECT * FROM customers WHERE email = ? AND contact = ? ORDER BY created_at DESC LIMIT 1',
    [email, contact]
  );
  return rows[0];
}

//register customers 
export const registerCustomerModel = async (password, customer_id) => {
  console.log("model", password, customer_id)
  const [result] = await pool.query(
    'UPDATE customers SET pasword = ?, staus = ? WHERE customer_id = ?',
    [password, 'active', customer_id]
  );
  return result[0];
}

export const getCusName = async (id) => {
  console.log("sssss")
  const [result] = await pool.query(
    `SELECT name FROM customers WHERE id = ?`,
    [id]
  );
  console.log("sssss"+result[0].name)
  return result[0].name;
};

// Add to models/customerModel.js
export const getAllCustomersModel = async () => {
  const [rows] = await pool.query(
    `SELECT customer_id, name, email, phone, address, created_at, staus 
     FROM customers 
     WHERE role = 'customers'`
  );
  return rows;
};

export const updateCustomerModel = async (customerId, updateData) => {
  const { name, email, phone, address, staus } = updateData;

  // Validate input parameters
  if (!customerId || !name || !email || !phone) {
    throw new Error('Missing required fields');
  }

  await pool.query(
    `UPDATE customers 
     SET name = ?, email = ?, phone = ?, address = ?, staus = ?
     WHERE customer_id = ?`,
    [name, email, phone, address || '', staus || 'active', customerId]
  );

  return getCustomersByCusIdModel(customerId);
};

